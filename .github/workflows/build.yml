name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
    
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Restore dependencies
      run: dotnet restore Jellyfin.Plugin.MoviesRefine/Jellyfin.Plugin.MoviesRefine.csproj

    - name: Build
      run: dotnet build Jellyfin.Plugin.MoviesRefine/Jellyfin.Plugin.MoviesRefine.csproj --configuration Release --no-restore
    
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create plugin package
      run: |
        mkdir -p plugin-package
        cp Jellyfin.Plugin.MoviesRefine/bin/Release/net6.0/Jellyfin.Plugin.MoviesRefine.dll plugin-package/
        cd plugin-package
        zip -r ../jellyfin-movies-refine_${{ steps.get_version.outputs.VERSION || '1.0.0' }}.zip .
    
    - name: Calculate checksum
      id: checksum
      run: |
        CHECKSUM=$(md5sum jellyfin-movies-refine_${{ steps.get_version.outputs.VERSION || '1.0.0' }}.zip | cut -d ' ' -f 1)
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
        echo "Calculated MD5 checksum: $CHECKSUM"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin-zip
        path: jellyfin-movies-refine_${{ steps.get_version.outputs.VERSION || '1.0.0' }}.zip
    
    - name: Update manifest.json
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # Get commit messages since last tag for changelog
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD | head -10)
        else
          CHANGELOG="- Initial release with intelligent pattern detection and safe title cleaning"
        fi
        
        # Escape special characters for JSON
        CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | sed 's/"/\\"/g' | tr '\n' ' ')
        
        # Create new version entry JSON
        NEW_VERSION="{
          \"version\": \"${{ steps.get_version.outputs.VERSION }}\",
          \"changelog\": \"$CHANGELOG_ESCAPED\",
          \"targetAbi\": \"10.8.0.0\",
          \"sourceUrl\": \"https://github.com/dontmint/jellyfin-movies-refine/releases/download/${{ github.ref_name }}/jellyfin-movies-refine_${{ steps.get_version.outputs.VERSION }}.zip\",
          \"checksum\": \"${{ steps.checksum.outputs.CHECKSUM }}\",
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
        }"
        
        # Use jq to add new version at the beginning of versions array
        jq --argjson newVersion "$NEW_VERSION" '.[0].versions = [$newVersion] + .[0].versions' manifest.json > manifest_temp.json && mv manifest_temp.json manifest.json
        
        # Commit and push the updated manifest
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add manifest.json
        git commit -m "chore: add version ${{ steps.get_version.outputs.VERSION }} to manifest.json" || exit 0
        git push origin HEAD:master
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: jellyfin-movies-refine_${{ steps.get_version.outputs.VERSION }}.zip